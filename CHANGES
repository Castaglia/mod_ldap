v2.8:
* The username escape sequence in search filter templates has changed.
  You must now use %v instead of %u as the escape for the username. For
  example, if you had:

    LDAPDoAuth on dc=example,dc=com (uid=%u)

  in your proftpd.conf with a previous version of mod_ldap, you will need
  to change this to:

    LDAPDoAuth on dc=example,dc=com (uid=%v)

* LDAPAuthBinds is now enabled by default. I'm sick of hearing "Your
  mod_ldap is broken; it won't talk to my LDAP server and I've ignored the
  convenient error message about userPassword that mod_ldap logs."

* The full path to user home directories is now created. Directories leading
  up to the user's home directory are created root-owned and mode 755 (i.e.,
  they are not subject to the mode argument to LDAPHomedirOnDemand). Home
  directory creation now works for all users, not just users with the same
  UID/GID as the main ProFTPD server. Lastly, the mode argument to
  LDAPHomedirOnDemand is no longer subject to ProFTPD's Umask.

* TLS support (You'll need to edit mod_ldap.c to define USE_LDAPV3_TLS and
  recompile proftpd, then say 'LDAPUseTLS on' in your proftpd.conf). This
  may or may not work with non-OpenLDAP SDKs; I'd love to hear if anyone has
  it working with the Mozilla LDAP SDK or any others.

* The LDAP search sizelimit is now set to prevent LDAP server thrashing with
  wildcarded usernames.

* Basic caching support has been added. This should cut down on the number
  of queries made to the directory server. In addition, negative caching
  is now enabled by default.

* LDAPHomedirOnDemandSuffix can now take multiple arguments (multiple
  directories to create) and can be activated independently of
  LDAPHomedirOnDemand.

* With the addition of LDAPHomedirOnDemandPrefix, home directories can now
  be completely autogenerated, removing the need for a homeDirectory
  attribute in each user's LDAP entry. Say:

    LDAPHomedirOnDemandPrefix /home

  in your proftpd.conf to give users a home directory with the format
  /home/username. In this example, the user joe would be given the home
  directory /home/joe.

* Attribute names are now #defines at the top of mod_ldap.c. You can now
  change attribute names by editing mod_ldap.c and recompiling.

* The LDAPDefaultUID and LDAPDefaultGID directives can now be forced;
  enabling LDAPForceDefaultUID or LDAPForceDefaultGID will apply the
  default UID or GID (respectively) even if a user has a different UID/GID
  in his uidNumber or gidNumber attribute.

* Fairly extensive code cleanup and comment syncing.

v2.7.6:
* Fixing the OpenLDAP 2 fixes.

v2.7.5:
* Fixes for OpenLDAP 2 support.
* Fix LDAP authentication filter use; previously, the user-specified search
  filter would not be used in the second stage of authenticating a user.

v2.7.4:
* The LDAPDefaultAuthScheme directive should function properly now.

v2.7.3:
* Removed some old, useless code.

v2.7.2:
* LDAPQueryTimeout fix. In mod_ldap v2.7.1, in some situations, the query
  timeout could be set to -1, which would cause all LDAP lookups to fail.

v2.7.1:
* Ported MacGyver's portable UID/GID code to mod_ldap
* The value passed to LDAPQueryTimeout is now honored (the timeout isn't
  simply set to 1 second)

v2.7:
* Added a fix for picky LDAP servers like Sun Directory Services; using
AuthBinds with those LDAP servers would break in previous mod_ldap versions.
See the comments in the code for more details (search for "Sun Directory
Services").
* You can now pass a file mode to LDAPHomedirOnDemand to create home
directories with that mode.
* Improved group support; mod_ldap now supports multiple memberUid
attributes for a group object.
* Miscellaneous neatening/tightening of high-level auth/lookup handler
functions.
* You can now specify custom LDAP search filters at runtime. See the
configuration guide (doc/Configuration.html) entries for LDAPDo* for more
details.
* Objectclass is now enforced. You *must* have an objectclass attribute for
each of your LDAP objects. This attribute must have a value of
'posixAccount' ("objectclass: posixAccount"). For groups, this attribute
must have the value 'posixGroup' ("objectclass: posixGroup"). If you wish to 
disable this objectclass enforcement, use the the LDAP filter "(uid=%u)" for 
Auth and UID lookups (see doc/Configuration.html for how to specify a custom
LDAP search filter).
* Removed allowedServices code. The functionality that allowedServices
provided can now be duplicated with a modified LDAP search filter.

For example, to replicate basic allowedServices checking, pass this LDAP
search filter to LDAPDoAuth:
(&(uid=%u)(|(allowedServices=*FTP*)(!(allowedService=*))))

To emulate deniedServices checking, use this search filter:
(&(uid=%u)(!(deniedServices=*FTP*)))

To emulate *both* allowedServices and deniedServices checking, use this
filter (beware line wrap):
(&(uid=%u)(|(allowedServices=*FTP*)(!(allowedService=*)))(!(deniedServices=*FTP*)))

v2.6.1:
* Fixed a bug that would prevent proper search scope selection.

v2.6:
* HomedirOnDemandSuffix - create an additional subdirectory in a user's home
  directory (/home/user/anotherdirectory) on demand
* Minor group fixes/cleanups - supplementary groups now work properly
* Password {scheme}s are now treated in a case-insensitive manner.
* Password-hash support for any crypto method OpenSSL supports
  To enable extended OpenSSL password hash support, edit mod_ldap.c and
  uncomment #define HAVE_OPENSSL. You'll also need to edit Make.rules to
  link against OpenSSL. Further details are provided in mod_ldap.c.
* Runtime search scope selection; one-level or subtree searches can be
  selected from proftpd.conf.

v2.5.2:
* Fixed a bug that would allow unauthorized users to log in when mod_ldap
  is used with other authentication modules and LDAPAuthBinds is set to on.

v2.5.1:
* Fixed a one-line bug that broke password authentication when AuthBinds
  weren't being used.

v2.5:
* Authenticated bind support added. mod_ldap now fetches all user information
  except for userPassword as the DN specified in LDAPDNInfo and then re-binds
  to the LDAP server as the connecting user with the user-supplied password.
  If the bind succeeds, the user is allowed to log in. This also has the
  added advantage of allowing mod_ldap to support any password encryption
  scheme that your LDAP server supports. Also, a privileged DN is no longer
  needed to read the userPassword attribute from the LDAP server.
* Realized I wasn't checking the return value of find_config() for NULL
  values, this would cause ProFTPD to segfault if certain config file
  entries were not present.
* Removed debugging code that might contain NULL values; passing a NULL
  value to printf() and friends under Solaris causes a segfault.
* Miscellaneous cleanups, code neatening.

v2.0:
* Config file syntax revamped:
   LDAPServer            localhost
   LDAPDNInfo            cn=your-dn,dc=horde,dc=net dnpass
   LDAPQueryTimeout      5
   LDAPDoAuth            on "dc=users,dc=horde,dc=net"
   LDAPDoUIDLookups      on "dc=users,dc=horde,dc=net"
   LDAPDoGIDLookups      on "dc=groups,dc=horde,dc=net"
   LDAPDefaultUID        35000
   LDAPDefaultGID        1000
   LDAPNegativeCache     on
   LDAPHomedirOnDemand   on
   LDAPDefaultAuthScheme clear
* Configurable LDAP query timeout [Peter Deacon <peterd@iea-software.com>]
* Cleartext password "encryption" scheme ("{clear}mypass")
* UID-to-name and GID-to-name lookups in directory listings
* Separate prefixes for user and group lookups
* Can turn on/off UID-to-name and GID-to-name lookups independently
* Default [UG]IDs. Say you want to have a web-toaster type of deal, with
  all users having the same [UG]IDs. Just don't put [ug]idNumber attrs in
  your LDAP database for those users, and set these configuration
  directives. Any user that doesn't have a [UG]ID in the LDAP database will
  have that info filled in with the default [UG]ID.
* mod_ldap is now able to function in a pure virtual-user environment;
  please note, however, that the loginShell LDAP attr still must be a
  valid shell. You can turn this check off by saying RequireValidShell off
  in your proftpd.conf
* allowedServices attr: (I broke with objectclass here, couldn't find
  something that seemed to fit this.) This attribute contains a
  comma-deliminated list of services to allow this particular user.  The
  string "FTP" corresponds to FTP service. If no allowedServices attr is
  present, all services will be allowed.
* You can have alternate LDAP servers; just specify LDAPServer "host1
  host2"; [Peter Deacon <peterd@iea-software.com>]
* LDAPHomedirOnDemand to automatically create home directories in a
  virtual-user environment. [patch: Bert Vermeulen <bert@be.easynet.net>]
* LDAPDefaultAuthScheme to select the authentication scheme to use when
  no {prefix} is present in a user's userPassword LDAP attr.
  [patch: Bert Vermeulen <bert@be.easynet.net>]
* Virtual hosting support may or may not work okay; theoretically, I think
  adding LDAP configuration directives to a <VirtualHost> block will work,
  but this hasn't been tested.

New Tested Platforms:

* Solaris 2.6 with Netscape Directory Server and the Mozilla LDAP C SDK,
  available at http://www.mozilla.org/directory/csdk.html.
  Peter Fabian <fabian@staff.matavnet.hu>
* Solaris 7 with gcc 2.95.1 and OpenLDAP 1.2.7
  Ralf Kruedewagen <Ralf.Kruedewagen@meocom.de>

v1.2:
* made the variables for the config entries static
* moved the meat of the ldap querying code to a separate function, this
  gets the individual getpw*() handlers down to about 15-20 lines each.
  also paves the way for easy LDAP group lookups too.
* explicitly set ld = NULL in p_endpwent(), looks like ldap_unbind()
  doesn't always set it to NULL, and bad things happen later.
* fixed a showstopper: if there's a user/group directive in proftpd.conf,
  mod_ldap:getpwnam() will be called to look up the user. since the
  LDAP config variables aren't initialized yet, the LDAP libraries crash
  and burn upon encountering a NULL ldap_prefix. put some checks in
  p_setpwent() to check for this and disable LDAP lookups before the
  parent forks and the config is initialized. thanks to Sean Murphy
  <smurphy@berbee.com> for sending me on this path.
* modified pw_auth() so that it will assume crypt() if there's no leading
  {scheme} in the password returned by the LDAP query.
* pw_auth() turned off logging of unidentifiable password encryption
  schemes; this would syslog the encrypted password returned by the ldap
  server. many people have their logs tightened, but not all.
* a few miscellaneous changes & cleanups

v1.1:
* Added $Libraries$ directive to mod_ldap so the module is now entirely
  self-contained.
* Changed one reference to sprintf() to snprintf() and changed uidstr
  in p_getpwuid() to have a length of BUFSIZ.
* Added config option (LDAPNegativeCache) to turn LDAP negative caching
  on and off. The default is off (don't do LDAP negative caching).
* Added entries to doc/Configuration.html for all the LDAP configuration
  directives.
* MacGyver added mod_ldap to the ProFTPD CVS tree; proftpd-ldap-1.1
  is now in sync with ProFTPD CVS.

v1.0:
* Initial release of proftpd-ldap
